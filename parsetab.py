
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DIVIDE EQUALS ID LPAREN MINUS NUM PLUS RPAREN SEMICOLON TIMESstatement : ID EQUALS expression SEMICOLONexpression : expression PLUS term\n                  | expression MINUS termexpression : termterm : term TIMES factor\n            | term DIVIDE factorterm : factorfactor : NUMfactor : LPAREN expression RPAREN'
    
_lr_action_items = {'ID':([0,],[2,]),'$end':([1,9,],[0,-1,]),'EQUALS':([2,],[3,]),'NUM':([3,8,10,11,12,13,],[7,7,7,7,7,7,]),'LPAREN':([3,8,10,11,12,13,],[8,8,8,8,8,8,]),'SEMICOLON':([4,5,6,7,15,16,17,18,19,],[9,-4,-7,-8,-2,-3,-5,-6,-9,]),'PLUS':([4,5,6,7,14,15,16,17,18,19,],[10,-4,-7,-8,10,-2,-3,-5,-6,-9,]),'MINUS':([4,5,6,7,14,15,16,17,18,19,],[11,-4,-7,-8,11,-2,-3,-5,-6,-9,]),'RPAREN':([5,6,7,14,15,16,17,18,19,],[-4,-7,-8,19,-2,-3,-5,-6,-9,]),'TIMES':([5,6,7,15,16,17,18,19,],[12,-7,-8,12,12,-5,-6,-9,]),'DIVIDE':([5,6,7,15,16,17,18,19,],[13,-7,-8,13,13,-5,-6,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([3,8,],[4,14,]),'term':([3,8,10,11,],[5,5,15,16,]),'factor':([3,8,10,11,12,13,],[6,6,6,6,17,18,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> ID EQUALS expression SEMICOLON','statement',4,'p_statement_assign','main.py',40),
  ('expression -> expression PLUS term','expression',3,'p_expression_binop','main.py',44),
  ('expression -> expression MINUS term','expression',3,'p_expression_binop','main.py',45),
  ('expression -> term','expression',1,'p_expression_term','main.py',50),
  ('term -> term TIMES factor','term',3,'p_term_binop','main.py',54),
  ('term -> term DIVIDE factor','term',3,'p_term_binop','main.py',55),
  ('term -> factor','term',1,'p_term_factor','main.py',60),
  ('factor -> NUM','factor',1,'p_factor_num','main.py',64),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','main.py',68),
]
